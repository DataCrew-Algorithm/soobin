# 1로 만들기
# 참고 : https://jae04099.tistory.com/entry/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%B0%B1%EC%A4%80-1463-1%EB%A1%9C-%EB%A7%8C%EB%93%A4%EA%B8%B0

N = int(input())
d = [0] * (N + 1)

#           0  1  2  3  4  5  6  7  8  9  10
# print(d) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]          
# "d"에 "계산된 횟수"를 저장

for i in range(2, N + 1):

    d[i] = d[i - 1] + 1 
    # 실제 계산은 -1인데 횟수이므로 +1로 써준것임

    if i % 3 == 0:
        d[i] = min(d[i], d[i // 3] + 1)	
        # 1을 더하는 것은 d는 계산 결과값이 아닌 "계산한 횟수"를 저장하는 것 이기 때문 
        # d[i]에는 더하지 않는 이유는 이미 1을 뺄 때 1을 더해준 이력이 있기 때문이다. (13번째줄 code)

    if i % 2 == 0:
        d[i] = min(d[i], d[i // 2] + 1)


# 즉 셋 다 시도하는 방법
# 여기서는 if - elif - else를 사용하면 안됨 -> if만 이용해야 세 연산을 다 거칠 수 있으므로
# if continue, else continue를 써도 됨

print(d[N])

# 풀이과정
#           0  1  2  3  4  5  6  7  8  9  10
# print(d) [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
###############################################################
# i = 2
# d[2] = d[1] + 1 = 0 + 1 = 1

#           0  1  2  3  4  5  6  7  8  9  10
# print(d) [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]

# 2 % 2 = 0 -> d[2] = min(d[2], d[2//2] + 1) = min(1, d[1] + 1) = min(1, 1) = 1

#           0  1  2  3  4  5  6  7  8  9  10
# print(d) [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]
###############################################################
# i = 3
# d[3] = d[2] + 1 = 1 + 1 = 2

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0]

# 3 % 3 = 0 -> d[3] = min(d[3], d[3//3] + 1) = min(2, d[1] + 1) = min(2, 1) = 1

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0]
###############################################################
# i = 4
# d[4] = d[3] + 1 = 1 + 1 = 2

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0]

# 4 % 2 = 0 -> d[4] = min(d[4], d[4//2] + 1) = min(2, d[2] + 1) = min(3, 2) = 2

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 0, 0, 0, 0, 0, 0]
###############################################################
# i = 5
# d[5] = d[4] + 1 = 2 + 1 = 3

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 0, 0, 0, 0, 0]
###############################################################
# i = 6
# d[6] = d[5] + 1 = 3 + 1 = 4

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 4, 0, 0, 0, 0]

# 6 % 3 = 0 -> d[6] = min(d[6], d[6//3] + 1) = min(4, d[2] + 1) = min(4, 2) = 2

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 0, 0, 0, 0]

# 6 % 2 = 0 -> d[6] = min(d[6], d[6//2] + 1) = min(2, d[3] + 1) = min(2, 2) = 2

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 0, 0, 0, 0]
###############################################################
# i = 7
# d[7] = d[6] + 1 = 2 + 1 = 3

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 3, 0, 0, 0]
###############################################################
# i = 8
# d[8] = d[7] + 1 = 3 + 1 = 4

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 3, 4, 0, 0]

# 8 % 2 = 0 -> d[8] = min(d[8], d[8//2] + 1) = min(4, d[4] + 1) = min(4, 3) = 3

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 3, 3, 0, 0]
###############################################################
# i = 9
# d[9] = d[8] + 1 = 3 + 1 = 4

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 3, 3, 4, 0]

# 9 % 3 = 0 -> d[9] = min(d[9], d[9//3] + 1) = min(4, d[3] + 1) = min(4, 2) = 2

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 3, 3, 2, 0]
###############################################################
# i = 10
# d[10] = d[9] + 1 = 2 + 1 = 3

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 3, 3, 2, 3]

# 10 % 2 = 0 -> d[10] = min(d[10], d[10//2] + 1) = min(3, d[5] + 1) = min(3, 4) = 3

#      0  1  2  3  4  5  6  7  8  9  10
# d : [0, 0, 1, 1, 2, 3, 2, 3, 3, 2, 3]
###############################################################
# print(d[10]) = 3


